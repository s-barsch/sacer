
// +build ignore

{{define "cases" -}}
{{$prop := .Prop}}
{{- range $i, $name := .List}}
	case {{typeDef $name}}:
		return e.({{typeDef $name}}){{$prop}}
{{- end -}}
{{end}}

{{define "main" -}}
// Code generated by go generate; DO NOT EDIT.

package entry

import (
	"fmt"
	"time"
)

func Title(e interface{}, lang string) string {
	switch e.(type) {
	{{- template "cases" (action .NoFile ".Title(lang)")}}
	}
	return "no title: invalid entry type"
}

func Id(e interface{}) string {
	switch e.(type) {
	{{- template "cases" (action .NoFile ".Id()")}}
	case {{typeDef "file"}}:
		return e.({{typeDef "file"}}).Id
	}
	return "no id: invalid entry type"
}

func EntryHold(e interface{}) *Hold {
	switch e.(type) {
	{{- template "cases" (action .NoFile ".File.Hold")}}
	case {{typeDef "file"}}:
		return e.({{typeDef "file"}}).Hold
	}
	return nil
}

func EntryFile(e interface{}) *File {
	switch e.(type) {
	{{- template "cases" (action .NoFile ".File")}}
	case {{typeDef "file"}}:
		return e.({{typeDef "file"}})
	}
	return nil
}

func EntrySection(e interface{}) string {
	file := EntryFile(e)
	if file != nil {
		return f.Section()
	}
	return "no section: invalid entry type"
}

func Type(e interface{}) string {
	switch e.(type) {
{{- range $i, $name := .All}}
	case {{typeDef $name}}:
		return "{{$name}}"
{{- end}}
	}
	return "no type: invalid entry type"
}

func Permalink(e interface{}, lang string) string {
	switch e.(type) {
	{{- template "cases" (action .NoFile ".Permalink(lang)")}}
	case {{typeDef "file"}}:
		return e.({{typeDef "file"}})
	}
	return "no permalink: invalid entry type"
}

func Date(e interface{}) time.Time {
	switch e.(type) {
	{{- template "cases" (action .NoFile ".Date")}}
	case {{typeDef "file"}}:
		return e.({{typeDef "file"}})
	}
	return time.Time{} 
}

func ModTime(e interface{}) time.Time {
	switch e.(type) {
	{{- template "cases" (action .NoFile ".ModTime")}}
	case {{typeDef "file"}}:
		return e.({{typeDef "file"}}).ModTime
	}
	return time.Time{}
}

func EntryInfo(e interface{}) Info {
	switch e.(type) {
	{{- template "cases" (action .NoFile ".Info")}}
	}
	return map[string]string{}
}

func setInfo(e interface{}, i Info) error {
	switch e.(type) {
{{- range $i, $name := .NoFile}}
	case {{typeDef $name}}:
		{{$name}}.Info = i
{{- end}}
	default:
		return fmt.Errorf("could not set info: invalid entry type. %v", e)
	}
	return nil
}
{{end}}
